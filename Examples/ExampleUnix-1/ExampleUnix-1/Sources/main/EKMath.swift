// LOCK: File generated by gyb, do not edit
// swiftlint:disable identifier_name

#if os(Linux)
	import Glibc
#else
	import Darwin
#endif

func EKToRadians(_ degrees: Double) -> Double {
	return degrees / 180 * Double(M_PI)
}

//// Comparator Chains
precedencegroup ComparisonChainPrecedence {
	higherThan: ComparisonPrecedence
	associativity: right
}

infix operator ≤: ComparisonChainPrecedence
infix operator ≤=: ComparisonChainPrecedence
infix operator ≥: ComparisonChainPrecedence
infix operator ≥=: ComparisonChainPrecedence

//
func ≤ (left: Int, right: Int) -> Int {

	if left < right {
		return left
	} else {
		return -Int.max
	}
}

func ≤= (left: Int, right: Int) -> Int {

	if left <= right {
		return left
	} else {
		return -Int.max
	}
}

func ≥ (left: Int, right: Int) -> Int {

	if left > right {
		return left
	} else {
		return Int.max
	}
}

func ≥= (left: Int, right: Int) -> Int {

	if left >= right {
		return left
	} else {
		return Int.max
	}
}
//
func ≤ (left: Float, right: Float) -> Float {

	if left < right {
		return left
	} else {
		return -Float.infinity
	}
}

func ≤= (left: Float, right: Float) -> Float {

	if left <= right {
		return left
	} else {
		return -Float.infinity
	}
}

func ≥ (left: Float, right: Float) -> Float {

	if left > right {
		return left
	} else {
		return Float.infinity
	}
}

func ≥= (left: Float, right: Float) -> Float {

	if left >= right {
		return left
	} else {
		return Float.infinity
	}
}
//
func ≤ (left: Double, right: Double) -> Double {

	if left < right {
		return left
	} else {
		return -Double.infinity
	}
}

func ≤= (left: Double, right: Double) -> Double {

	if left <= right {
		return left
	} else {
		return -Double.infinity
	}
}

func ≥ (left: Double, right: Double) -> Double {

	if left > right {
		return left
	} else {
		return Double.infinity
	}
}

func ≥= (left: Double, right: Double) -> Double {

	if left >= right {
		return left
	} else {
		return Double.infinity
	}
}
